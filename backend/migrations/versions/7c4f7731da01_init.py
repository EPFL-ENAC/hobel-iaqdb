"""init

Revision ID: 7c4f7731da01
Revises: 
Create Date: 2024-08-19 11:18:46.713858

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '7c4f7731da01'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "study",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("identifier", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("website", sa.String(), nullable=True),
        sa.Column("building_count", sa.Integer(), nullable=True),
        sa.Column("space_count", sa.Integer(), nullable=True),
        sa.Column("start_year", sa.Integer(), nullable=True),
        sa.Column("end_year", sa.Integer(), nullable=True),
        sa.Column("duration", sa.Integer(), nullable=True),
        sa.Column("occupant_impact", sa.String(), nullable=True),
        sa.Column("other_indoor_param", sa.String(), nullable=True),
        sa.Column("citation", sa.String(), nullable=True),
        sa.Column("doi", sa.String(), nullable=True),
        sa.Column("funding", sa.String(), nullable=True),
        sa.Column("ethics", sa.String(), nullable=True),
        sa.Column("license", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_study_identifier"), "study",
                    ["identifier"], unique=False),

    op.create_table(
        "person",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("email", sa.String(), unique=True, index=True),
        sa.Column("email_public", sa.Boolean(), nullable=False),
        sa.Column("institution", sa.String(), nullable=False),
        sa.Column("study_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["study_id"], ["study.id"],),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_person_study_id"),
                    "person", ["study_id"], unique=False)

    op.create_table(
        "instrument",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("identifier", sa.String(), nullable=False),
        sa.Column("manufacturer", sa.String(), nullable=True),
        sa.Column("model", sa.String(), nullable=True),
        sa.Column("equipment_grade_rating", sa.String(), nullable=True),
        sa.Column("placement", sa.String(), nullable=True),
        sa.Column("study_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["study_id"], ["study.id"],),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_instrument_identifier"), "instrument",
                    ["identifier"], unique=False),
    op.create_index(op.f("ix_instrument_study_id"), "instrument",
                    ["study_id"], unique=False)

    op.create_table(
        "instrumentparameter",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("physical_parameter", sa.String(), nullable=False),
        sa.Column("analysis_method", sa.String(), nullable=True),
        sa.Column("measurement_uncertainty", sa.String(), nullable=True),
        sa.Column("instrument_id", sa.Integer(), nullable=True),
        sa.Column("study_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["instrument_id"], ["instrument.id"],),
        sa.ForeignKeyConstraint(["study_id"], ["study.id"],),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_instrumentparameter_instrument_id"), "instrumentparameter",
                    ["instrument_id"], unique=False)
    op.create_index(op.f("ix_instrumentparameter_study_id"), "instrumentparameter",
                    ["study_id"], unique=False)

    op.create_table(
        "building",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("identifier", sa.String(), nullable=False),
        sa.Column("country", sa.String(), nullable=False),
        sa.Column("city", sa.String(), nullable=False),
        sa.Column("postcode", sa.String(), nullable=True),
        sa.Column("timezone", sa.String(), nullable=True),
        sa.Column("altitude", sa.Float(), nullable=True),
        sa.Column("climate_zone", sa.String(), nullable=True),
        sa.Column("long", sa.Float(), nullable=True),
        sa.Column("lat", sa.Float(), nullable=True),
        sa.Column("type", sa.String(), nullable=True),
        sa.Column("other_type", sa.String(), nullable=True),
        sa.Column("outdoor_env", sa.String(), nullable=True),
        sa.Column("other_outdoor_env", sa.String(), nullable=True),
        sa.Column("green_certified", sa.String(), nullable=True),
        sa.Column("construction_year", sa.Integer(), nullable=True),
        sa.Column("renovation", sa.String(), nullable=False),
        sa.Column("renovation_year", sa.Integer(), nullable=True),
        sa.Column("mechanical_ventilation", sa.String(), nullable=False),
        sa.Column("operable_windows", sa.String(), nullable=False),
        sa.Column("special_population", sa.String(), nullable=False),
        sa.Column("other_special_population", sa.String(), nullable=True),
        sa.Column("smoking", sa.String(), nullable=False),
        sa.Column("study_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["study_id"], ["study.id"],),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_building_identifier"), "building",
                    ["identifier"], unique=False),
    op.create_index(op.f("ix_building_study_id"), "building",
                    ["study_id"], unique=False)

    op.create_table(
        "certification",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("program", sa.String(), nullable=False),
        sa.Column("level", sa.String(), nullable=False),
        sa.Column("building_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["building_id"], ["building.id"],),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_certification_building_id"), "certification",
                    ["building_id"], unique=False)

    op.create_table(
        "space",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("identifier", sa.String(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("occupancy", sa.String(), nullable=True),
        sa.Column("mechanical_ventilation_status", sa.String(), nullable=True),
        sa.Column("mechanical_ventilation_type", sa.String(), nullable=True),
        sa.Column("windows_status", sa.String(), nullable=True),
        sa.Column("ventilation_rate", sa.Float(), nullable=True),
        sa.Column("air_change_rate", sa.Float(), nullable=True),
        sa.Column("particle_filtration_rating", sa.Integer(), nullable=True),
        sa.Column("cooling_status", sa.String(), nullable=True),
        sa.Column("cooling_type", sa.String(), nullable=True),
        sa.Column("other_cooling_type", sa.String(), nullable=True),
        sa.Column("heating_status", sa.String(), nullable=True),
        sa.Column("heating_type", sa.String(), nullable=True),
        sa.Column("other_heating_type", sa.String(), nullable=True),
        sa.Column("air_filtration", sa.String(), nullable=True),
        sa.Column("printers", sa.String(), nullable=True),
        sa.Column("carpets", sa.String(), nullable=True),
        sa.Column("combustion_sources", sa.String(), nullable=True),
        sa.Column("major_combustion_sources", sa.String(), nullable=True),
        sa.Column("minor_combustion_sources", sa.String(), nullable=True),
        sa.Column("pets", sa.String(), nullable=True),
        sa.Column("dampness", sa.String(), nullable=True),
        sa.Column("mold", sa.String(), nullable=True),
        sa.Column("detergents", sa.String(), nullable=True),
        sa.Column("study_id", sa.Integer(), nullable=True),
        sa.Column("building_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["building_id"], ["building.id"],),
        sa.ForeignKeyConstraint(["study_id"], ["study.id"],),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_space_identifier"), "space",
                    ["identifier"], unique=False),
    op.create_index(op.f("ix_space_building_id"), "space",
                    ["building_id"], unique=False)
    op.create_index(op.f("ix_space_study_id"), "space",
                    ["study_id"], unique=False)

    op.create_table(
        "dataset",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("folder", sa.JSON(), nullable=True),
        sa.Column("study_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["study_id"], ["study.id"],),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_dataset_study_id"), "dataset",
                    ["study_id"], unique=False)

    op.create_table(
        "variable",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("unit", sa.String(), nullable=True),
        sa.Column("format", sa.String(), nullable=True),
        sa.Column("reference", sa.String(), nullable=True),
        sa.Column("study_id", sa.Integer(), nullable=True),
        sa.Column("dataset_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["dataset_id"], ["dataset.id"],),
        sa.ForeignKeyConstraint(["study_id"], ["study.id"],),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_variable_name"), "variable",
                    ["name"], unique=False),
    op.create_index(op.f("ix_variable_dataset_id"), "variable",
                    ["dataset_id"], unique=False)
    op.create_index(op.f("ix_variable_study_id"), "variable",
                    ["study_id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_space_study_id"), table_name="space")
    op.drop_index(op.f("ix_space_building_id"), table_name="space")
    op.drop_index(op.f("ix_space_identifier"), table_name="space")
    op.drop_table("space")

    op.drop_index(op.f("ix_certification_building_id"),
                  table_name="certification")
    op.drop_table("certification")

    op.drop_index(op.f("ix_building_study_id"), table_name="building")
    op.drop_index(op.f("ix_building_identifier"), table_name="building")
    op.drop_table("building")

    op.drop_index(op.f("ix_instrumentparameter_study_id"),
                  table_name="instrumentparameter")
    op.drop_index(op.f("ix_instrumentparameter_instrument_id"),
                  table_name="instrumentparameter")
    op.drop_table("instrumentparameter")

    op.drop_index(op.f("ix_instrument_study_id"), table_name="instrument")
    op.drop_index(op.f("ix_instrument_identifier"), table_name="instrument")
    op.drop_table("instrument")

    op.drop_index(op.f("ix_variable_study_id"), table_name="variable")
    op.drop_index(op.f("ix_variable_dataset_id"), table_name="variable")
    op.drop_index(op.f("ix_variable_name"), table_name="variable")
    op.drop_table("variable")

    op.drop_index(op.f("ix_dataset_study_id"), table_name="dataset")
    op.drop_table("dataset")

    op.drop_index(op.f("ix_person_study_id"),
                  table_name="person")
    op.drop_index(op.f("ix_person_email"), table_name="person")
    op.drop_table("person")

    op.drop_index(op.f("ix_study_identifier"), table_name="study")
    op.drop_table("study")
    # ### end Alembic commands ###
